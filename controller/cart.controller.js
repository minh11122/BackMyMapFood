const CartItem = require("../models/cartItem.model");
const Food = require("../models/food.model");
const Shop = require("../models/shop.model");
const Voucher = require("../models/voucher.model");

// üõí Add m√≥n ƒÉn v√†o gi·ªè h√†ng
exports.addToCart = async (req, res) => {
  try {
    const { userId, shopId, foodId, quantity = 1, note } = req.body;

    console.log("üì• AddToCart request body:", req.body);

    // Ki·ªÉm tra ƒë·∫ßu v√†o
    if (!userId || !shopId || !foodId)
      return res.status(400).json({ success: false, message: "Thi·∫øu userId, shopId ho·∫∑c foodId" });

    const shop = await Shop.findById(shopId);
    const food = await Food.findById(foodId);

    if (!shop || !food) {
      console.warn("‚ö†Ô∏è Shop ho·∫∑c m√≥n kh√¥ng t·ªìn t·∫°i:", { shop, food });
      return res.status(404).json({ success: false, message: "Shop ho·∫∑c m√≥n kh√¥ng t·ªìn t·∫°i" });
    }

    // Ki·ªÉm tra m√≥n c√≥ thu·ªôc shop kh√¥ng
    if (food.shop_id.toString() !== shopId) {
      console.warn("‚ö†Ô∏è M√≥n kh√¥ng thu·ªôc shop:", { foodShop: food.shop_id, reqShop: shopId });
      return res.status(400).json({ success: false, message: "M√≥n n√†y kh√¥ng thu·ªôc shop n√†y" });
    }

    // Ki·ªÉm tra m√≥n ƒë√£ c√≥ trong gi·ªè ch∆∞a
    const existing = await CartItem.findOne({
      user: userId,
      shop: shopId,
      food: foodId,
      status: "ACTIVE",
    });

    if (existing) {
      existing.quantity += quantity;
      await existing.save();
      console.log("‚úÖ ƒê√£ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng:", existing);
      return res.status(200).json({ success: true, message: "ƒê√£ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng", data: existing });
    }

    // Th√™m m·ªõi
    const newItem = await CartItem.create({
      user: userId,
      shop: shopId,
      food: foodId,
      quantity,
      price: food.price,
      note,
    });

    console.log("‚úÖ ƒê√£ th√™m m√≥n m·ªõi v√†o gi·ªè:", newItem);
    res.status(201).json({ success: true, message: "ƒê√£ th√™m v√†o gi·ªè h√†ng", data: newItem });
  } catch (err) {
    console.error("‚ùå Add to cart error:", {
      message: err.message,
      stack: err.stack,
      name: err.name,
    });
    res.status(500).json({
      success: false,
      message: "Server error khi th√™m v√†o gi·ªè",
      error: err.message,
    });
  }
};

// üß∫ L·∫•y gi·ªè h√†ng theo shop
exports.getCartByShop = async (req, res) => {
  try {
    const { userId, shopId } = req.params;
    console.log("üì• GetCart request:", { userId, shopId });

    const cartItems = await CartItem.find({
      user: userId,
      shop: shopId,
      status: "ACTIVE",
    })
      .populate("food", "name price discount image_url")
      .populate("shop", "name logoUrl address")
      .lean();

    console.log("üì¶ Found cart items:", cartItems.length);

    if (!cartItems.length)
      return res.status(200).json({ success: true, message: "Ch∆∞a c√≥ m√≥n n√†o trong gi·ªè", data: [] });

    res.status(200).json({
      success: true,
      count: cartItems.length,
      data: cartItems,
    });
  } catch (err) {
    console.error("‚ùå Get cart error:", {
      message: err.message,
      stack: err.stack,
      name: err.name,
    });
    res.status(500).json({
      success: false,
      message: "Server error khi l·∫•y gi·ªè h√†ng",
      error: err.message,
    });
  }
};

// üß∫ L·∫•y to√†n b·ªô gi·ªè h√†ng c·ªßa user, group theo shop
exports.getCartByUser = async (req, res) => {
  try {
    const { userId } = req.params
    console.log("üì• GetCartByUser:", userId)

    const cartItems = await CartItem.find({
      user: userId,
      status: "ACTIVE",
    })
      .populate("food", "name price discount image_url")
      .populate("shop", "name logoUrl address")
      .lean()

    if (!cartItems.length) {
      return res.status(200).json({ success: true, data: [] })
    }

    // üß© Gom theo shop
    const grouped = {}
    for (const item of cartItems) {
      const shopId = item.shop._id.toString()
      if (!grouped[shopId]) {
        grouped[shopId] = {
          shop: item.shop,
          items: [],
        }
      }
      grouped[shopId].items.push(item)
    }

    res.status(200).json({
      success: true,
      count: cartItems.length,
      data: Object.values(grouped),
    })
  } catch (err) {
    console.error("‚ùå GetCartByUser error:", err)
    res.status(500).json({
      success: false,
      message: "Server error khi l·∫•y gi·ªè h√†ng ng∆∞·ªùi d√πng",
      error: err.message,
    })
  }
}

exports.getVouchersByShop = async (req, res) => {
  try {
    const { shopId } = req.params;

    if (!shopId)
      return res.status(400).json({ success: false, message: "Thi·∫øu shopId" });

    const now = new Date();
    const vouchers = await Voucher.find({
      shop: shopId,
      isActive: true,
      startDate: { $lte: now },
      endDate: { $gte: now },
    }).lean();

    if (!vouchers.length)
      return res.status(200).json({ success: true, message: "Kh√¥ng c√≥ voucher kh·∫£ d·ª•ng", data: [] });

    res.status(200).json({
      success: true,
      count: vouchers.length,
      data: vouchers,
    });
  } catch (err) {
    console.error("‚ùå Get vouchers error:", err);
    res.status(500).json({
      success: false,
      message: "Server error khi l·∫•y voucher",
      error: err.message,
    });
  }
};