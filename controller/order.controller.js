const Order = require("../models/order.model");
const UserAddress = require("../models/userAddress.model");
const CartItem = require("../models/cartItem.model");

exports.createOrder = async (req, res) => {
  console.log("üì¶ [CREATE ORDER] Body:", req.body);

  try {
    const {
      customer,
      shop,
      deliveryAddress,
      cartItems,
      voucher,
      discountAmount,
      subtotal,
      shippingFee,
      totalAmount,
      paymentMethod,
      note,
      gps,
      receiverName,
      receiverPhone,
      receiverEmail,
    } = req.body;

    // üîç Ki·ªÉm tra d·ªØ li·ªáu b·∫Øt bu·ªôc
    const missing = [];
    if (!customer) missing.push("customer");
    if (!shop) missing.push("shop");
    if (!deliveryAddress) missing.push("deliveryAddress");
    if (!cartItems || !Array.isArray(cartItems) || !cartItems.length)
      missing.push("cartItems");

    if (missing.length > 0) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu d·ªØ li·ªáu b·∫Øt bu·ªôc",
        missingFields: missing,
      });
    }

    // üè† Ki·ªÉm tra address ƒë√£ c√≥ ch∆∞a
    let addressDoc = await UserAddress.findOne({
      user: customer,
      "address.street": deliveryAddress,
    });

    if (!addressDoc) {
      addressDoc = await UserAddress.create({
        user: customer,
        address: { street: deliveryAddress },
        gps: { coordinates: gps || [0, 0] },
        isDefault: true,
      });
      console.log("üÜï T·∫°o m·ªõi ƒë·ªãa ch·ªâ:", addressDoc._id);
    }

    // üõí L·∫•y cartItem v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i CHECKOUT
    const cartDocs = await CartItem.find({
      _id: { $in: cartItems },
      user: customer,
      status: "ACTIVE",
    });
    if (!cartDocs.length)
      return res.status(400).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y m√≥n trong gi·ªè ho·∫∑c ƒë√£ checkout",
      });

    // Update tr·∫°ng th√°i cartItems
    await CartItem.updateMany(
      { _id: { $in: cartItems } },
      { $set: { status: "CHECKOUT" } }
    );

    // üßæ T·∫°o m√£ ƒë∆°n h√†ng
    const orderCode = "ORD-" + Date.now();

    const order = await Order.create({
      orderCode,
      customer,
      shop,
      deliveryAddress: addressDoc._id,
      cartItems: cartDocs.map((c) => c._id),
      voucher: voucher || null,
      discountAmount: discountAmount || 0,
      subtotal: subtotal || 0,
      shippingFee: shippingFee || 0,
      totalAmount: totalAmount || 0,
      paymentMethod: paymentMethod || "COD",
      note: note || null,
      status: "PENDING_PAYMENT",
      paymentStatus: paymentMethod === "COD" ? "COD_PENDING" : "UNPAID",
      receiverName,
      receiverPhone,
      receiverEmail,
    });

    console.log("‚úÖ ƒê∆°n h√†ng ƒë√£ t·∫°o:", order._id);

    return res.status(201).json({
      success: true,
      message: "T·∫°o ƒë∆°n h√†ng th√†nh c√¥ng",
      data: order,
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi t·∫°o ƒë∆°n h√†ng:", err);
    return res.status(500).json({
      success: false,
      message: "L·ªói server khi t·∫°o ƒë∆°n h√†ng",
      error: err.message,
    });
  }
};

exports.getOrders = async (req, res) => {
  try {
    const orders = await Order.find()
      // üë§ L·∫•y t√™n + sdt + avatar ng∆∞·ªùi ƒë·∫∑t
      .populate("customer", "full_name phone avatar_url")

      // üè™ L·∫•y t√™n + ƒë·ªãa ch·ªâ + ·∫£nh c·ª≠a h√†ng
      .populate("shop", "name address img")

      // üìç ƒê·ªãa ch·ªâ giao h√†ng
      .populate("deliveryAddress")

      // üçî M√≥n ƒÉn trong cartItems (k√®m ·∫£nh + gi√°)
      .populate({
        path: "cartItems",
        populate: {
          path: "food",
          select: "name price image_url", // ‚úÖ ƒê√∫ng v·ªõi model Food
        },
      })
      .sort({ createdAt: -1 });

    return res.status(200).json({
      success: true,
      message: "Danh s√°ch ƒë∆°n h√†ng",
      data: orders,
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng:", err);
    return res.status(500).json({
      success: false,
      message: "L·ªói server khi l·∫•y danh s√°ch ƒë∆°n h√†ng",
      error: err.message,
    });
  }
};

exports.cancelOrder = async (req, res) => {
  const orderId = req.params.id;
  const { cancelReason } = req.body; // optional

  try {
    const order = await Order.findById(orderId);
    if (!order) {
      return res
        .status(404)
        .json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });
    }

    if (order.status !== "PENDING_PAYMENT") {
      return res.status(400).json({
        success: false,
        message: "Ch·ªâ ƒë∆°n h√†ng ƒëang ch·ªù thanh to√°n m·ªõi c√≥ th·ªÉ h·ªßy",
      });
    }

    order.status = "CANCELLED";
    order.cancelReason = cancelReason || "Ng∆∞·ªùi d√πng h·ªßy";
    await order.save();

    return res
      .status(200)
      .json({ success: true, message: "H·ªßy ƒë∆°n h√†ng th√†nh c√¥ng", data: order });
  } catch (err) {
    console.error(err);
    return res.status(500).json({
      success: false,
      message: "L·ªói server khi h·ªßy ƒë∆°n h√†ng",
      error: err.message,
    });
  }
};
